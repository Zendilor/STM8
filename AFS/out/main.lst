                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _IRQ_ADC
                                     12 	.globl _IRQ_TIMER2
                                     13 	.globl _IRQ_TIMER1
                                     14 	.globl _IRQ_UART1_RX
                                     15 	.globl _main
                                     16 	.globl _Indication
                                     17 	.globl _ADC_Config
                                     18 	.globl _Get_Result
                                     19 	.globl _TIMER_Config
                                     20 	.globl _UART_Send
                                     21 	.globl _GPIO_Config
                                     22 	.globl _CLK_Config
                                     23 	.globl _segs
                                     24 	.globl _data_ADC
                                     25 	.globl _coefiz
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area DATA
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area INITIALIZED
      000000                         34 _coefiz::
      000000                         35 	.ds 4
      000004                         36 _data_ADC::
      000004                         37 	.ds 2
      000006                         38 _segs::
      000006                         39 	.ds 1
                                     40 ;--------------------------------------------------------
                                     41 ; Stack segment in internal ram 
                                     42 ;--------------------------------------------------------
                                     43 	.area	SSEG
      000000                         44 __start__stack:
      000000                         45 	.ds	1
                                     46 
                                     47 ;--------------------------------------------------------
                                     48 ; absolute external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DABS (ABS)
                                     51 
                                     52 ; default segment ordering for linker
                                     53 	.area HOME
                                     54 	.area GSINIT
                                     55 	.area GSFINAL
                                     56 	.area CONST
                                     57 	.area INITIALIZER
                                     58 	.area CODE
                                     59 
                                     60 ;--------------------------------------------------------
                                     61 ; interrupt vector 
                                     62 ;--------------------------------------------------------
                                     63 	.area HOME
      000000                         64 __interrupt_vect:
      000000 82v00u00u00             65 	int s_GSINIT ; reset
      000004 82 00 00 00             66 	int 0x000000 ; trap
      000008 82 00 00 00             67 	int 0x000000 ; int0
      00000C 82 00 00 00             68 	int 0x000000 ; int1
      000010 82 00 00 00             69 	int 0x000000 ; int2
      000014 82 00 00 00             70 	int 0x000000 ; int3
      000018 82 00 00 00             71 	int 0x000000 ; int4
      00001C 82 00 00 00             72 	int 0x000000 ; int5
      000020 82 00 00 00             73 	int 0x000000 ; int6
      000024 82 00 00 00             74 	int 0x000000 ; int7
      000028 82 00 00 00             75 	int 0x000000 ; int8
      00002C 82 00 00 00             76 	int 0x000000 ; int9
      000030 82 00 00 00             77 	int 0x000000 ; int10
      000034 82v00u00u22             78 	int _IRQ_TIMER1 ; int11
      000038 82 00 00 00             79 	int 0x000000 ; int12
      00003C 82v00u00u33             80 	int _IRQ_TIMER2 ; int13
      000040 82 00 00 00             81 	int 0x000000 ; int14
      000044 82 00 00 00             82 	int 0x000000 ; int15
      000048 82 00 00 00             83 	int 0x000000 ; int16
      00004C 82 00 00 00             84 	int 0x000000 ; int17
      000050 82v00u00u11             85 	int _IRQ_UART1_RX ; int18
      000054 82 00 00 00             86 	int 0x000000 ; int19
      000058 82 00 00 00             87 	int 0x000000 ; int20
      00005C 82 00 00 00             88 	int 0x000000 ; int21
      000060 82v00u00u57             89 	int _IRQ_ADC ; int22
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME
                                     94 	.area GSINIT
                                     95 	.area GSFINAL
                                     96 	.area GSINIT
      000000                         97 __sdcc_gs_init_startup:
      000000                         98 __sdcc_init_data:
                                     99 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  100 	ldw x, #l_DATA
      000003 27 07            [ 1]  101 	jreq	00002$
      000005                        102 00001$:
      000005 72 4FuFFuFF      [ 1]  103 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  104 	decw x
      00000A 26 F9            [ 1]  105 	jrne	00001$
      00000C                        106 00002$:
      00000C AEr00r00         [ 2]  107 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  108 	jreq	00004$
      000011                        109 00003$:
      000011 D6uFFuFF         [ 1]  110 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  111 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  112 	decw	x
      000018 26 F7            [ 1]  113 	jrne	00003$
      00001A                        114 00004$:
                                    115 ; stm8_genXINIT() end
                                    116 	.area GSFINAL
      000000 CCr00r64         [ 2]  117 	jp	__sdcc_program_startup
                                    118 ;--------------------------------------------------------
                                    119 ; Home
                                    120 ;--------------------------------------------------------
                                    121 	.area HOME
                                    122 	.area HOME
      000064                        123 __sdcc_program_startup:
      000064 CCr00r00         [ 2]  124 	jp	_main
                                    125 ;	return from main will return to caller
                                    126 ;--------------------------------------------------------
                                    127 ; code
                                    128 ;--------------------------------------------------------
                                    129 	.area CODE
                                    130 ;	src/main.c: 18: int main (void){
                                    131 ;	-----------------------------------------
                                    132 ;	 function main
                                    133 ;	-----------------------------------------
      000000                        134 _main:
                                    135 ;	src/main.c: 19: enableInterrupts();
      000000 9A               [ 1]  136 	rim
                                    137 ;	src/main.c: 20: CLK_Config();
      000001 CDr00r00         [ 4]  138 	call	_CLK_Config
                                    139 ;	src/main.c: 21: GPIO_Config();
      000004 CDr00r00         [ 4]  140 	call	_GPIO_Config
                                    141 ;	src/main.c: 22: TIMER_Config();
      000007 CDr00r00         [ 4]  142 	call	_TIMER_Config
                                    143 ;	src/main.c: 23: ADC_Config();
      00000A CDr00r00         [ 4]  144 	call	_ADC_Config
                                    145 ;	src/main.c: 25: while (1){
      00000D                        146 00102$:
      00000D CCr00r0D         [ 2]  147 	jp	00102$
      000010                        148 00104$:
                                    149 ;	src/main.c: 28: }
      000010 81               [ 4]  150 	ret
                                    151 ;	src/main.c: 30: INTERRUPT_HANDLER(IRQ_UART1_RX, 18){
                                    152 ;	-----------------------------------------
                                    153 ;	 function IRQ_UART1_RX
                                    154 ;	-----------------------------------------
      000011                        155 _IRQ_UART1_RX:
      000011 4F               [ 1]  156 	clr	a
      000012 62               [ 2]  157 	div	x, a
                                    158 ;	src/main.c: 31: UART_Send(UART1->DR);
      000013 C6 52 31         [ 1]  159 	ld	a, 0x5231
      000016 88               [ 1]  160 	push	a
      000017 CDr00r00         [ 4]  161 	call	_UART_Send
      00001A 84               [ 1]  162 	pop	a
                                    163 ;	src/main.c: 32: UART_Send(0x31);
      00001B 4B 31            [ 1]  164 	push	#0x31
      00001D CDr00r00         [ 4]  165 	call	_UART_Send
      000020 84               [ 1]  166 	pop	a
      000021                        167 00101$:
                                    168 ;	src/main.c: 33: }
      000021 80               [11]  169 	iret
                                    170 ;	src/main.c: 35: INTERRUPT_HANDLER(IRQ_TIMER1, 11){
                                    171 ;	-----------------------------------------
                                    172 ;	 function IRQ_TIMER1
                                    173 ;	-----------------------------------------
      000022                        174 _IRQ_TIMER1:
                                    175 ;	src/main.c: 36: TIM1->SR1 &= ~TIM1_SR1_UIF;   // Clear interrupt flag.
      000022 C6 52 55         [ 1]  176 	ld	a, 0x5255
      000025 A4 FE            [ 1]  177 	and	a, #0xfe
      000027 C7 52 55         [ 1]  178 	ld	0x5255, a
                                    179 ;	src/main.c: 37: ADC1->CR1 |= ADC1_CR1_ADON;
      00002A C6 54 01         [ 1]  180 	ld	a, 0x5401
      00002D AA 01            [ 1]  181 	or	a, #0x01
      00002F C7 54 01         [ 1]  182 	ld	0x5401, a
      000032                        183 00101$:
                                    184 ;	src/main.c: 38: }
      000032 80               [11]  185 	iret
                                    186 ;	src/main.c: 40: INTERRUPT_HANDLER(IRQ_TIMER2, 13){
                                    187 ;	-----------------------------------------
                                    188 ;	 function IRQ_TIMER2
                                    189 ;	-----------------------------------------
      000033                        190 _IRQ_TIMER2:
      000033 4F               [ 1]  191 	clr	a
      000034 62               [ 2]  192 	div	x, a
                                    193 ;	src/main.c: 41: TIM2->SR1 &= ~TIM2_SR1_UIF;   // Clear interrupt flag.
      000035 C6 53 04         [ 1]  194 	ld	a, 0x5304
      000038 A4 FE            [ 1]  195 	and	a, #0xfe
      00003A C7 53 04         [ 1]  196 	ld	0x5304, a
                                    197 ;	src/main.c: 42: Indication(segs);
      00003D 3Bu00u06         [ 1]  198 	push	_segs+0
      000040 CDr00r00         [ 4]  199 	call	_Indication
      000043 84               [ 1]  200 	pop	a
                                    201 ;	src/main.c: 43: segs++;
      000044 72 5Cu00u06      [ 1]  202 	inc	_segs+0
                                    203 ;	src/main.c: 44: if (segs > 2){
      000048 C6u00u06         [ 1]  204 	ld	a, _segs+0
      00004B A1 02            [ 1]  205 	cp	a, #0x02
      00004D 22 03            [ 1]  206 	jrugt	00110$
      00004F CCr00r56         [ 2]  207 	jp	00103$
      000052                        208 00110$:
                                    209 ;	src/main.c: 45: segs = 0;
      000052 72 5Fu00u06      [ 1]  210 	clr	_segs+0
      000056                        211 00103$:
                                    212 ;	src/main.c: 47: }
      000056 80               [11]  213 	iret
                                    214 ;	src/main.c: 49: INTERRUPT_HANDLER(IRQ_ADC, 22){ // Interrupt body for ADC1.
                                    215 ;	-----------------------------------------
                                    216 ;	 function IRQ_ADC
                                    217 ;	-----------------------------------------
      000057                        218 _IRQ_ADC:
      000057 4F               [ 1]  219 	clr	a
      000058 62               [ 2]  220 	div	x, a
      000059 52 02            [ 2]  221 	sub	sp, #2
                                    222 ;	src/main.c: 50: ADC1->CSR &= ~ADC1_CSR_EOC;    // Clear flag interrupt for ADC1.
      00005B C6 54 00         [ 1]  223 	ld	a, 0x5400
      00005E A4 7F            [ 1]  224 	and	a, #0x7f
      000060 C7 54 00         [ 1]  225 	ld	0x5400, a
                                    226 ;	src/main.c: 51: data_ADC = (Get_Result() * coefiz) * 1000;
      000063 CDr00r00         [ 4]  227 	call	_Get_Result
      000066 89               [ 2]  228 	pushw	x
      000067 CDr00r00         [ 4]  229 	call	___uint2fs
      00006A 5B 02            [ 2]  230 	addw	sp, #2
      00006C 3Bu00u03         [ 1]  231 	push	_coefiz+3
      00006F 3Bu00u02         [ 1]  232 	push	_coefiz+2
      000072 3Bu00u01         [ 1]  233 	push	_coefiz+1
      000075 3Bu00u00         [ 1]  234 	push	_coefiz+0
      000078 89               [ 2]  235 	pushw	x
      000079 90 89            [ 2]  236 	pushw	y
      00007B CDr00r00         [ 4]  237 	call	___fsmul
      00007E 5B 08            [ 2]  238 	addw	sp, #8
      000080 89               [ 2]  239 	pushw	x
      000081 90 89            [ 2]  240 	pushw	y
      000083 5F               [ 1]  241 	clrw	x
      000084 89               [ 2]  242 	pushw	x
      000085 4B 7A            [ 1]  243 	push	#0x7a
      000087 4B 44            [ 1]  244 	push	#0x44
      000089 CDr00r00         [ 4]  245 	call	___fsmul
      00008C 5B 08            [ 2]  246 	addw	sp, #8
      00008E 89               [ 2]  247 	pushw	x
      00008F 90 89            [ 2]  248 	pushw	y
      000091 CDr00r00         [ 4]  249 	call	___fs2uint
      000094 5B 04            [ 2]  250 	addw	sp, #4
      000096 CFu00u04         [ 2]  251 	ldw	_data_ADC+0, x
                                    252 ;	src/main.c: 52: seg_num [0] = data_ADC / 1000;
      000099 CEu00u04         [ 2]  253 	ldw	x, _data_ADC+0
      00009C 90 AE 03 E8      [ 2]  254 	ldw	y, #0x03e8
      0000A0 65               [ 2]  255 	divw	x, y
      0000A1 9F               [ 1]  256 	ld	a, xl
      0000A2 C7u00u00         [ 1]  257 	ld	_seg_num+0, a
                                    258 ;	src/main.c: 53: seg_num [1] = (data_ADC % 1000) / 100;
      0000A5 AEr00r01         [ 2]  259 	ldw	x, #(_seg_num + 0)+1
      0000A8 1F 01            [ 2]  260 	ldw	(0x01, sp), x
      0000AA CEu00u04         [ 2]  261 	ldw	x, _data_ADC+0
      0000AD 90 AE 03 E8      [ 2]  262 	ldw	y, #0x03e8
      0000B1 65               [ 2]  263 	divw	x, y
      0000B2 93               [ 1]  264 	ldw	x, y
      0000B3 90 AE 00 64      [ 2]  265 	ldw	y, #0x0064
      0000B7 65               [ 2]  266 	divw	x, y
      0000B8 9F               [ 1]  267 	ld	a, xl
      0000B9 1E 01            [ 2]  268 	ldw	x, (0x01, sp)
      0000BB F7               [ 1]  269 	ld	(x), a
                                    270 ;	src/main.c: 54: seg_num [2] = (data_ADC % 100) / 10;
      0000BC AEr00r02         [ 2]  271 	ldw	x, #(_seg_num + 0)+2
      0000BF 1F 01            [ 2]  272 	ldw	(0x01, sp), x
      0000C1 CEu00u04         [ 2]  273 	ldw	x, _data_ADC+0
      0000C4 90 AE 00 64      [ 2]  274 	ldw	y, #0x0064
      0000C8 65               [ 2]  275 	divw	x, y
      0000C9 93               [ 1]  276 	ldw	x, y
      0000CA 90 AE 00 0A      [ 2]  277 	ldw	y, #0x000a
      0000CE 65               [ 2]  278 	divw	x, y
      0000CF 9F               [ 1]  279 	ld	a, xl
      0000D0 1E 01            [ 2]  280 	ldw	x, (0x01, sp)
      0000D2 F7               [ 1]  281 	ld	(x), a
      0000D3                        282 00101$:
                                    283 ;	src/main.c: 55: }
      0000D3 5B 02            [ 2]  284 	addw	sp, #2
      0000D5 80               [11]  285 	iret
                                    286 	.area CODE
                                    287 	.area CONST
                                    288 	.area INITIALIZER
      000000                        289 __xinit__coefiz:
      000000 3B 53 33 33            290 	.byte #0x3b, #0x53, #0x33, #0x33	;  3.222656e-03
      000004                        291 __xinit__data_ADC:
      000004 00 00                  292 	.dw #0x0000
      000006                        293 __xinit__segs:
      000006 00                     294 	.db #0x00	; 0
                                    295 	.area CABS (ABS)
